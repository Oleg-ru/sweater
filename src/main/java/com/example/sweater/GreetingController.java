package com.example.sweater;

import com.example.sweater.domain.Message;
import com.example.sweater.repository.MessageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;
import java.util.Map;

@Controller
public class GreetingController {
    /*
        This means to get the bean called userRepository
        Which is auto-generated by Spring, we will use it to handle the data
     */
    @Autowired
    private MessageRepository messageRepository;

    @GetMapping("/greeting")
    public String greeting(
            @RequestParam(name = "name", required = false,defaultValue = "World")
                    String name, Map<String, Object> model) {
        model.put("name", name);
        return "greeting";
    }
    @GetMapping
    public String index(Map<String, Object> model) {
        //Разобраться с этой частью
        Iterable<Message> messages = messageRepository.findAll();

        model.put("messages", messages);

        return "index";
    }

    @PostMapping("index")
    public String add(@RequestParam String text, @RequestParam String tag, Map<String, Object> model) {
        //Добавляю в список сообщения по нажатию кнопки
        Message message = new Message(text, tag);
        messageRepository.save(message);

        //Вывод списка (так делать не надо, это должно быть разделено на /add и /all)
        Iterable<Message> messages = messageRepository.findAll();
        model.put("messages", messages);
        return "index";
    }

    //Указывается в параметре аннотации mapping из html файла 'action="filter"'
    @PostMapping("filter")
    public String filter(@RequestParam String filter, Map<String, Object> model) {
        //У меня нет метода поиска по тегу, тогда создаю его в MessageRepository
        Iterable<Message> messages;
        if (filter != null && !filter.isEmpty()) {
            messages = messageRepository.findByTag(filter);
        } else {
            messages = messageRepository.findAll();
        }

        model.put("messages", messages);
        return "index";
    }
}
